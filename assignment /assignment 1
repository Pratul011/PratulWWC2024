#include <iostream>
#include <vector>
#include <fstream>
#include <string>
using namespace std;

// Class representing an inventory item
class InventoryItem {
public:
    int itemID;
    string name;
    string category;
    int quantity;
    int reorderLevel;

    InventoryItem(int id, string n, string c, int q, int r)
        : itemID(id), name(n), category(c), quantity(q), reorderLevel(r) {}

    void displayItem() const {
        cout << "ID: " << itemID << ", Name: " << name
             << ", Category: " << category << ", Quantity: " << quantity
             << ", Reorder Level: " << reorderLevel << endl;
    }
};

// Class for the warehouse inventory management system
class WarehouseInventory {
private:
    vector<InventoryItem> items;

    void alertLowStock(const InventoryItem &item) {
        if (item.quantity < item.reorderLevel) {
            cout << "Alert: Item '" << item.name << "' is below reorder level.\n";
        }
    }

public:
    void addItem() {
        int id, quantity, reorderLevel;
        string name, category;

        cout << "Enter Item ID: ";
        cin >> id;
        cout << "Enter Item Name: ";
        cin.ignore();
        getline(cin, name);
        cout << "Enter Category: ";
        getline(cin, category);
        cout << "Enter Quantity: ";
        cin >> quantity;
        cout << "Enter Reorder Level: ";
        cin >> reorderLevel;

        InventoryItem newItem(id, name, category, quantity, reorderLevel);
        items.push_back(newItem);
        alertLowStock(newItem);
        cout << "Item added successfully.\n";
    }

    void updateStock() {
        int id, quantity;
        cout << "Enter Item ID to update: ";
        cin >> id;

        for (auto &item : items) {
            if (item.itemID == id) {
                cout << "Enter new quantity: ";
                cin >> quantity;
                item.quantity = quantity;
                alertLowStock(item);
                cout << "Stock updated successfully.\n";
                return;
            }
        }
        cout << "Item not found.\n";
    }

    void viewInventory() const {
        if (items.empty()) {
            cout << "Inventory is empty.\n";
            return;
        }

        for (const auto &item : items) {
            item.displayItem();
        }
    }

    void searchItem() const {
        string keyword;
        cout << "Enter name or category to search: ";
        cin.ignore();
        getline(cin, keyword);

        for (const auto &item : items) {
            if (item.name == keyword || item.category == keyword) {
                item.displayItem();
            }
        }
    }

    void exportInventory() const {
        ofstream file("inventory.txt");

        if (!file) {
            cout << "Error opening file for writing.\n";
            return;
        }

        for (const auto &item : items) {
            file << item.itemID << "," << item.name << "," << item.category
                 << "," << item.quantity << "," << item.reorderLevel << "\n";
        }

        file.close();
        cout << "Inventory exported successfully.\n";
    }
};

int main() {
    WarehouseInventory inventory;
    int choice;

    do {
        cout << "\nWarehouse Inventory Management System\n";
        cout << "1. Add Item\n";
        cout << "2. Update Stock\n";
        cout << "3. View Inventory\n";
        cout << "4. Search Item\n";
        cout << "5. Export Inventory\n";
        cout << "6. Exit\n";
        cout << "Enter your choice: ";
        cin >> choice;

        switch (choice) {
        case 1:
            inventory.addItem();
            break;
        case 2:
            inventory.updateStock();
            break;
        case 3:
            inventory.viewInventory();
            break;
        case 4:
            inventory.searchItem();
            break;
        case 5:
            inventory.exportInventory();
            break;
        case 6:
            cout << "Exiting system. Goodbye!\n";
            break;
        default:
            cout << "Invalid choice. Please try again.\n";
        }
    } while (choice != 6);

    return 0;
}

